{"ast":null,"code":"import * as THREE from 'three';\n// 2.导入(初始化)场景\nimport scene from '@/threeModal/scene';\n// 3.1导入相机配置\nimport camera from '@/threeModal/camera';\n// 4.导入渲染器\nimport renderer from '@/threeModal/renderer';\n// 5.1导入坐标轴\nimport axse from '@/threeModal/axseHelp';\nimport { ref, onMounted } from 'vue';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n// 8.1获取场景div\n\nexport default {\n  __name: 'SceneCanvas',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n\n    // 1.导入threejs\n    let sceneDiv = ref(null);\n\n    // 3.2.将相机添加进场景\n    scene.add(camera);\n\n    // 5.2\n    scene.add(axse);\n\n    // 11.设置屏幕大小改变画布自适应\n    window.addEventListener('resize', () => {\n      // 更新摄像头\n      camera.aspect = window.innerWidth / window.innerHeight;\n      // 更新投影矩阵\n      camera.updateProjectionMatrix();\n      // 更新渲染器\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      // 设置渲染器像素比例\n      renderer.setPixelRatio(window.devicePixelRatio);\n    });\n\n    // 10.创建轨道控制器\n    const controls = new OrbitControls(camera, renderer.domElement);\n    // 12.设置控制阻尼\n    controls.enableDamping = true;\n\n    // vue挂载成功之后再去获取dom\n    onMounted(() => {\n      // 8.2将渲染器加入dom\n      sceneDiv.value.appendChild(renderer.domElement);\n      // 9.2渲染执行\n      animate();\n    });\n    // 9.渲染器渲染场景\n    // 9.1渲染声明\n    // const clock = new THREE.Clock()\n    function animate() {\n      // const dateTime = clock.getDelta()\n      // 控制器不起效果的原因是控制轨道每一帧都要更新\n      controls.update();\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    }\n    const __returned__ = {\n      get sceneDiv() {\n        return sceneDiv;\n      },\n      set sceneDiv(v) {\n        sceneDiv = v;\n      },\n      controls,\n      animate,\n      get THREE() {\n        return THREE;\n      },\n      get scene() {\n        return scene;\n      },\n      get camera() {\n        return camera;\n      },\n      get renderer() {\n        return renderer;\n      },\n      get axse() {\n        return axse;\n      },\n      ref,\n      onMounted,\n      get OrbitControls() {\n        return OrbitControls;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"AAQA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B;AACA,OAAOC,KAAK,MAAM,oBAAoB;AACtC;AACA,OAAOC,MAAM,MAAM,qBAAqB;AACxC;AACA,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C;AACA,OAAOC,IAAI,MAAM,uBAAuB;AACxC,SAASC,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,SAASC,aAAa,QAAQ,2CAA2C;AACzE;;;;;;;;;IAZA;IAaA,IAAIC,QAAQ,GAAGH,GAAG,CAAC,IAAI,CAAC;;IAExB;IACAJ,KAAK,CAACQ,GAAG,CAACP,MAAM,CAAC;;IAEjB;IACAD,KAAK,CAACQ,GAAG,CAACL,IAAI,CAAC;;IAGf;IACAM,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,MAAM;MACtC;MACAT,MAAM,CAACU,MAAM,GAAGF,MAAM,CAACG,UAAU,GAAGH,MAAM,CAACI,WAAW;MACtD;MACAZ,MAAM,CAACa,sBAAsB,EAAE;MAC/B;MACAZ,QAAQ,CAACa,OAAO,CAACN,MAAM,CAACG,UAAU,EAAEH,MAAM,CAACI,WAAW,CAAC;MACvD;MACAX,QAAQ,CAACc,aAAa,CAACP,MAAM,CAACQ,gBAAgB,CAAC;IACjD,CAAC,CAAC;;IAGF;IACA,MAAMC,QAAQ,GAAG,IAAIZ,aAAa,CAACL,MAAM,EAAEC,QAAQ,CAACiB,UAAU,CAAC;IAC/D;IACAD,QAAQ,CAACE,aAAa,GAAG,IAAI;;IAG7B;IACAf,SAAS,CAAC,MAAM;MACd;MACAE,QAAQ,CAACc,KAAK,CAACC,WAAW,CAACpB,QAAQ,CAACiB,UAAU,CAAC;MAC/C;MACAI,OAAO,EAAE;IACX,CAAC,CAAC;IACF;IACA;IACA;IACA,SAASA,OAAO,GAAI;MAClB;MACA;MACAL,QAAQ,CAACM,MAAM,EAAE;MACjBtB,QAAQ,CAACuB,MAAM,CAACzB,KAAK,EAAEC,MAAM,CAAC;MAC9ByB,qBAAqB,CAACH,OAAO,CAAC;IAChC","names":["THREE","scene","camera","renderer","axse","ref","onMounted","OrbitControls","sceneDiv","add","window","addEventListener","aspect","innerWidth","innerHeight","updateProjectionMatrix","setSize","setPixelRatio","devicePixelRatio","controls","domElement","enableDamping","value","appendChild","animate","update","render","requestAnimationFrame"],"sources":["D:/vscodeDemo/threeDemo/threejs_smartcity/src/components/SceneCanvas.vue"],"sourcesContent":["<template>\n  <div class=\"sceneCanvas\" ref=\"sceneDiv\">\n    <!-- 画布元素追加 -->\n  </div>\n</template>\n<!-- 场景 -->\n<script setup>\n// 1.导入threejs\nimport * as THREE from 'three'\n// 2.导入(初始化)场景\nimport scene from '@/threeModal/scene'\n// 3.1导入相机配置\nimport camera from '@/threeModal/camera'\n// 4.导入渲染器\nimport renderer from '@/threeModal/renderer'\n// 5.1导入坐标轴\nimport axse from '@/threeModal/axseHelp'\nimport { ref, onMounted } from 'vue'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n// 8.1获取场景div\nlet sceneDiv = ref(null)\n\n// 3.2.将相机添加进场景\nscene.add(camera)\n\n// 5.2\nscene.add(axse)\n\n\n// 11.设置屏幕大小改变画布自适应\nwindow.addEventListener('resize', () => {\n  // 更新摄像头\n  camera.aspect = window.innerWidth / window.innerHeight\n  // 更新投影矩阵\n  camera.updateProjectionMatrix()\n  // 更新渲染器\n  renderer.setSize(window.innerWidth, window.innerHeight)\n  // 设置渲染器像素比例\n  renderer.setPixelRatio(window.devicePixelRatio)\n})\n\n\n// 10.创建轨道控制器\nconst controls = new OrbitControls(camera, renderer.domElement)\n// 12.设置控制阻尼\ncontrols.enableDamping = true\n\n\n// vue挂载成功之后再去获取dom\nonMounted(() => {\n  // 8.2将渲染器加入dom\n  sceneDiv.value.appendChild(renderer.domElement)\n  // 9.2渲染执行\n  animate()\n})\n// 9.渲染器渲染场景\n// 9.1渲染声明\n// const clock = new THREE.Clock()\nfunction animate () {\n  // const dateTime = clock.getDelta()\n  // 控制器不起效果的原因是控制轨道每一帧都要更新\n  controls.update()\n  renderer.render(scene, camera)\n  requestAnimationFrame(animate)\n}\n\n</script>\n\n<style scoped lang=\"scss\">\n// 画布全屏\n.scene {\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  left: 0;\n  top: 0;\n  z-index: 100;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}