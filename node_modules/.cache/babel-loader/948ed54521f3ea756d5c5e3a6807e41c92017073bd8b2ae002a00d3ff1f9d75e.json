{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-c64005f8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"sceneCanvas\",\n  ref: \"sceneDiv\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 画布元素追加 \")], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;;EACOA,KAAK,EAAC,aAAa;EAACC,GAAG,EAAC;;;uBAA7BC,oBAEM,OAFNC,UAEM,GADJC,+BAAe","names":["class","ref","_createElementBlock","_hoisted_1","_createCommentVNode"],"sourceRoot":"","sources":["D:\\vscodeDemo\\threeDemo\\threejs_smartcity\\src\\components\\SceneCanvas.vue"],"sourcesContent":["<template>\n  <div class=\"sceneCanvas\" ref=\"sceneDiv\">\n    <!-- 画布元素追加 -->\n  </div>\n</template>\n<!-- 场景 -->\n<script setup>\n// 1.导入threejs\nimport * as THREE from 'three'\n// 2.导入(初始化)场景\nimport scene from '@/threeModal/scene'\n// 3.1导入相机配置\nimport camera from '@/threeModal/camera'\n// 4.导入渲染器\nimport renderer from '@/threeModal/renderer'\n// 5.1导入坐标轴\nimport axse from '@/threeModal/axseHelp'\nimport { ref, onMounted } from 'vue'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n// 8.1获取场景div\nlet sceneDiv = ref(null)\n\n// 3.2.将相机添加进场景\nscene.add(camera)\n\n// 5.2\nscene.add(axse)\n\n\n// 11.设置屏幕大小改变画布自适应\nwindow.addEventListener('resize', () => {\n  // 更新摄像头\n  camera.aspect = window.innerWidth / window.innerHeight\n  // 更新投影矩阵\n  camera.updateProjectionMatrix()\n  // 更新渲染器\n  renderer.setSize(window.innerWidth, window.innerHeight)\n  // 设置渲染器像素比例\n  renderer.setPixelRatio(window.devicePixelRatio)\n})\n\n\n// 10.创建轨道控制器\nconst controls = new OrbitControls(camera, renderer.domElement)\n// 12.设置控制阻尼\ncontrols.enableDamping = true\n\n\n// vue挂载成功之后再去获取dom\nonMounted(() => {\n  // 8.2将渲染器加入dom\n  sceneDiv.value.appendChild(renderer.domElement)\n  // 9.2渲染执行\n  animate()\n})\n// 9.渲染器渲染场景\n// 9.1渲染声明\n// const clock = new THREE.Clock()\nfunction animate () {\n  // const dateTime = clock.getDelta()\n  // 控制器不起效果的原因是控制轨道每一帧都要更新\n  controls.update()\n  renderer.render(scene, camera)\n  requestAnimationFrame(animate)\n}\n\n</script>\n\n<style scoped lang=\"scss\">\n// 画布全屏\n.scene {\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  left: 0;\n  top: 0;\n  z-index: 100;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}