{"ast":null,"code":"import * as THREE from 'three';\nimport { ref, onMounted } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n// 场景div\n\nexport default {\n  __name: 'SceneCanvas',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n\n    // 1.导入threejs\n    let sceneDiv = ref(null);\n    // 2.初始化场景\n    const scene = new THREE.Scene();\n\n    // 3.初始化透视相机\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    // 4.设置相机位置\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix(); // 更新投影矩阵\n    camera.position.set(0, 0, 25);\n    // 5.将相机添加进场景\n    scene.add(camera);\n\n    //6.加入辅助坐标轴\n    const axse = new THREE.AxesHelper(10);\n    scene.add(axse);\n\n    //7.初始化渲染器\n    const renderer = new THREE.WebGL1Renderer({\n      alpha: true\n    });\n    // 允许在场景中使用阴影贴图\n    renderer.shadowMap.enabled = true;\n    // 设置画布大小\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    // 11.设置屏幕大小改变画布自适应\n    window.addEventListener('resize', () => {\n      // 更新摄像头\n      camera.aspect = window.innerWidth / window.innerHeight;\n      // 更新投影矩阵\n      camera.updateProjectionMatrix();\n      // 更新渲染器\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      // 设置渲染器像素比例\n      renderer.setPixelRatio(window.devicePixelRatio);\n    });\n\n    // 8.将渲染器加入dom\n    document.body.appendChild(renderer.domElement);\n\n    // const clock = new THREE.Clock()\n    // 10.创建轨道控制器\n    const controls = new OrbitControls(camera, renderer.domElement);\n    // 12.设置控制阻尼\n    controls.enableDamping = true;\n\n    //9.渲染器渲染场景\n    function animate() {\n      // const dateTime = clock.getDelta()\n      // 控制器不起效果的原因是控制轨道每一帧都要更新\n      controls.update();\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    }\n    animate();\n\n    // vue挂载成功之后再去获取dom\n    onMounted(() => {\n      console.log(sceneDiv);\n    });\n    const __returned__ = {\n      get sceneDiv() {\n        return sceneDiv;\n      },\n      set sceneDiv(v) {\n        sceneDiv = v;\n      },\n      scene,\n      camera,\n      axse,\n      renderer,\n      controls,\n      animate,\n      get THREE() {\n        return THREE;\n      },\n      get ref() {\n        return ref;\n      },\n      get onMounted() {\n        return onMounted;\n      },\n      get OrbitControls() {\n        return OrbitControls;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"AASA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,EAAEC,SAAS,QAAQ,OAAO;AACtC,SAASC,aAAa,QAAQ,2CAA2C;AACzE;;;;;;;;;IAJA;IAKA,IAAIC,QAAQ,GAAGH,GAAG,CAAC,IAAI,CAAC;IACxB;IACA,MAAMI,KAAK,GAAG,IAAIL,KAAK,CAACM,KAAK,EAAE;;IAE/B;IACA,MAAMC,MAAM,GAAG,IAAIP,KAAK,CAACQ,iBAAiB,CACxC,EAAE,EACFC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EACtC,GAAG,EACH,IAAI,CACL;IACD;IACAJ,MAAM,CAACK,MAAM,GAAGH,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW;IACtDJ,MAAM,CAACM,sBAAsB,EAAE,EAAC;IAChCN,MAAM,CAACO,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IAC7B;IACAV,KAAK,CAACW,GAAG,CAACT,MAAM,CAAC;;IAEjB;IACA,MAAMU,IAAI,GAAG,IAAIjB,KAAK,CAACkB,UAAU,CAAC,EAAE,CAAC;IACrCb,KAAK,CAACW,GAAG,CAACC,IAAI,CAAC;;IAEf;IACA,MAAME,QAAQ,GAAG,IAAInB,KAAK,CAACoB,cAAc,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IAC1D;IACAF,QAAQ,CAACG,SAAS,CAACC,OAAO,GAAG,IAAI;IACjC;IACAJ,QAAQ,CAACK,OAAO,CAACf,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;;IAEvD;IACAF,MAAM,CAACgB,gBAAgB,CAAC,QAAQ,EAAE,MAAM;MACtC;MACAlB,MAAM,CAACK,MAAM,GAAGH,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW;MACtD;MACAJ,MAAM,CAACM,sBAAsB,EAAE;MAC/B;MACAM,QAAQ,CAACK,OAAO,CAACf,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;MACvD;MACAQ,QAAQ,CAACO,aAAa,CAACjB,MAAM,CAACkB,gBAAgB,CAAC;IACjD,CAAC,CAAC;;IAEF;IACAC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACX,QAAQ,CAACY,UAAU,CAAC;;IAE9C;IACA;IACA,MAAMC,QAAQ,GAAG,IAAI7B,aAAa,CAACI,MAAM,EAAEY,QAAQ,CAACY,UAAU,CAAC;IAC/D;IACAC,QAAQ,CAACC,aAAa,GAAG,IAAI;;IAE7B;IACA,SAASC,OAAO,GAAI;MAClB;MACA;MACAF,QAAQ,CAACG,MAAM,EAAE;MACjBhB,QAAQ,CAACiB,MAAM,CAAC/B,KAAK,EAAEE,MAAM,CAAC;MAC9B8B,qBAAqB,CAACH,OAAO,CAAC;IAChC;IACAA,OAAO,EAAE;;IAET;IACAhC,SAAS,CAAC,MAAM;MACdoC,OAAO,CAACC,GAAG,CAACnC,QAAQ,CAAC;IACvB,CAAC,CAAC","names":["THREE","ref","onMounted","OrbitControls","sceneDiv","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","aspect","updateProjectionMatrix","position","set","add","axse","AxesHelper","renderer","WebGL1Renderer","alpha","shadowMap","enabled","setSize","addEventListener","setPixelRatio","devicePixelRatio","document","body","appendChild","domElement","controls","enableDamping","animate","update","render","requestAnimationFrame","console","log"],"sources":["D:/vscodeDemo/threeDemo/threejs_smartcity/src/components/SceneCanvas.vue"],"sourcesContent":["<template>\n  <div class=\"sceneCanvas\" ref=\"scenes\">\n    <!-- 画布元素追加 -->\n    <div></div>\n  </div>\n</template>\n<!-- 场景 -->\n<script setup>\n// 1.导入threejs\nimport * as THREE from 'three'\nimport { ref, onMounted } from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n// 场景div\nlet sceneDiv = ref(null)\n// 2.初始化场景\nconst scene = new THREE.Scene()\n\n// 3.初始化透视相机\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  window.innerWidth / window.innerHeight,\n  0.1,\n  1000\n)\n// 4.设置相机位置\ncamera.aspect = window.innerWidth / window.innerHeight\ncamera.updateProjectionMatrix() // 更新投影矩阵\ncamera.position.set(0, 0, 25)\n// 5.将相机添加进场景\nscene.add(camera)\n\n//6.加入辅助坐标轴\nconst axse = new THREE.AxesHelper(10)\nscene.add(axse)\n\n//7.初始化渲染器\nconst renderer = new THREE.WebGL1Renderer({ alpha: true })\n// 允许在场景中使用阴影贴图\nrenderer.shadowMap.enabled = true\n// 设置画布大小\nrenderer.setSize(window.innerWidth, window.innerHeight)\n\n// 11.设置屏幕大小改变画布自适应\nwindow.addEventListener('resize', () => {\n  // 更新摄像头\n  camera.aspect = window.innerWidth / window.innerHeight\n  // 更新投影矩阵\n  camera.updateProjectionMatrix()\n  // 更新渲染器\n  renderer.setSize(window.innerWidth, window.innerHeight)\n  // 设置渲染器像素比例\n  renderer.setPixelRatio(window.devicePixelRatio)\n})\n\n// 8.将渲染器加入dom\ndocument.body.appendChild(renderer.domElement)\n\n// const clock = new THREE.Clock()\n// 10.创建轨道控制器\nconst controls = new OrbitControls(camera, renderer.domElement)\n// 12.设置控制阻尼\ncontrols.enableDamping = true\n\n//9.渲染器渲染场景\nfunction animate () {\n  // const dateTime = clock.getDelta()\n  // 控制器不起效果的原因是控制轨道每一帧都要更新\n  controls.update()\n  renderer.render(scene, camera)\n  requestAnimationFrame(animate)\n}\nanimate()\n\n// vue挂载成功之后再去获取dom\nonMounted(() => {\n  console.log(sceneDiv);\n})\n</script>\n\n<style scoped lang=\"scss\">\n// 画布全屏\n.scene {\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  left: 0;\n  top: 0;\n  z-index: 100;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}