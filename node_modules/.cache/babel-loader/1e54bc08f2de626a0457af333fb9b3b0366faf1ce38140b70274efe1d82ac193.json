{"ast":null,"code":"import \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport * as THREE from 'three';\nimport vertex from '@/shader/flyLine/vertexShader.glsl';\nimport fragment from '@/shader/flyLine/fragmentShader.glsl';\nimport gsap from 'gsap';\nexport default class FlyLineShader {\n  constructor(position = {\n    x: 0,\n    z: 0\n  }, color = 0xFFFFFF) {\n    // 根据点生成曲线\n    let linePoints = [new THREE.Vector3(0.2, 1, 0), new THREE.Vector3(position.x / 2, 1.5, position.z / 2), new THREE.Vector3(position.x, 0, position.z)];\n    // 创建三维平滑曲线\n    this.lineCurve = new THREE.CatmullRomCurve3(linePoints);\n    // 获取点\n    const points = this.lineCurve.getPoints(1000);\n    // 根据点创建几何\n    this.geometry = new THREE.BufferGeometry().setFromPoints(points);\n\n    // 给每个顶点设置属性\n    const aSizeArray = new Float32Array(points.length);\n    for (let i = 0; i < aSizeArray.length; i++) {\n      aSizeArray[i] = i;\n    }\n    // 设置几何体顶点属性\n    this.geometry.setAttribute('aSize', new THREE.BufferAttribute(aSizeArray, 1));\n\n    // 设置着色器材质\n    this.shaderMaterial = new THREE.ShaderMaterial({\n      uniforms: {\n        uTime: {\n          value: 0\n        },\n        uColor: {\n          value: new THREE.Color(color)\n        },\n        uLenght: {\n          value: points.length\n        }\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment,\n      transparent: true,\n      depthWrite: false,\n      blending: THREE.AdditiveBlending\n    });\n    this.mesh = new THREE.Points(this.geometry, this.shaderMaterial);\n    gsap.to(this.shaderMaterial.uniforms.uTime, {\n      value: 1000,\n      duration: 1,\n      ease: 'none',\n      repeat: -1\n    });\n  }\n  onRemove() {\n    this.mesh.remove();\n    this.mesh.removeFromParent();\n    this.mesh.material.dispose();\n    this.mesh.geometry.dispose();\n  }\n}","map":{"version":3,"names":["THREE","vertex","fragment","gsap","FlyLineShader","constructor","position","x","z","color","linePoints","Vector3","lineCurve","CatmullRomCurve3","points","getPoints","geometry","BufferGeometry","setFromPoints","aSizeArray","Float32Array","length","i","setAttribute","BufferAttribute","shaderMaterial","ShaderMaterial","uniforms","uTime","value","uColor","Color","uLenght","vertexShader","fragmentShader","transparent","depthWrite","blending","AdditiveBlending","mesh","Points","to","duration","ease","repeat","onRemove","remove","removeFromParent","material","dispose"],"sources":["D:/vscodeDemo/threeDemo/threejs_smartcity/src/threeModal/mesh/flyLineShader.js"],"sourcesContent":["import * as THREE from 'three'\r\nimport vertex from '@/shader/flyLine/vertexShader.glsl'\r\nimport fragment from '@/shader/flyLine/fragmentShader.glsl'\r\nimport gsap from 'gsap'\r\nexport default class FlyLineShader {\r\n  constructor(position = {x: 0, z: 0}, color = 0xFFFFFF) {\r\n    // 根据点生成曲线\r\n    let linePoints = [\r\n      new THREE.Vector3(0.2, 1, 0),\r\n      new THREE.Vector3(position.x / 2, 1.5, position.z / 2),\r\n      new THREE.Vector3(position.x, 0, position.z)\r\n    ]\r\n    // 创建三维平滑曲线\r\n    this.lineCurve = new THREE.CatmullRomCurve3(linePoints)\r\n    // 获取点\r\n    const points = this.lineCurve.getPoints(1000)\r\n    // 根据点创建几何\r\n    this.geometry = new THREE.BufferGeometry().setFromPoints(points)\r\n\r\n\r\n    // 给每个顶点设置属性\r\n    const aSizeArray = new Float32Array(points.length)\r\n    for (let i = 0; i < aSizeArray.length; i++) {\r\n      aSizeArray[i] = i\r\n    }\r\n    // 设置几何体顶点属性\r\n    this.geometry.setAttribute('aSize', new THREE.BufferAttribute(aSizeArray, 1))\r\n\r\n    // 设置着色器材质\r\n    this.shaderMaterial = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        uTime: {\r\n          value: 0\r\n        },\r\n        uColor: {\r\n          value: new THREE.Color(color)\r\n        },\r\n        uLenght: {\r\n          value: points.length\r\n        }\r\n      },\r\n      vertexShader: vertex,\r\n      fragmentShader: fragment,\r\n      transparent: true,\r\n      depthWrite: false,\r\n      blending: THREE.AdditiveBlending\r\n    })\r\n\r\n    this.mesh = new THREE.Points(this.geometry, this.shaderMaterial)\r\n\r\n    gsap.to(this.shaderMaterial.uniforms.uTime, {\r\n      value: 1000,\r\n      duration: 1,\r\n      ease: 'none',\r\n      repeat: -1\r\n    })\r\n  }\r\n  onRemove() {\r\n    this.mesh.remove()\r\n    this.mesh.removeFromParent()\r\n    this.mesh.material.dispose()\r\n    this.mesh.geometry.dispose()\r\n  }\r\n}"],"mappings":";;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,oCAAoC;AACvD,OAAOC,QAAQ,MAAM,sCAAsC;AAC3D,OAAOC,IAAI,MAAM,MAAM;AACvB,eAAe,MAAMC,aAAa,CAAC;EACjCC,WAAW,CAACC,QAAQ,GAAG;IAACC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAC,CAAC,EAAEC,KAAK,GAAG,QAAQ,EAAE;IACrD;IACA,IAAIC,UAAU,GAAG,CACf,IAAIV,KAAK,CAACW,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,EAC5B,IAAIX,KAAK,CAACW,OAAO,CAACL,QAAQ,CAACC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAED,QAAQ,CAACE,CAAC,GAAG,CAAC,CAAC,EACtD,IAAIR,KAAK,CAACW,OAAO,CAACL,QAAQ,CAACC,CAAC,EAAE,CAAC,EAAED,QAAQ,CAACE,CAAC,CAAC,CAC7C;IACD;IACA,IAAI,CAACI,SAAS,GAAG,IAAIZ,KAAK,CAACa,gBAAgB,CAACH,UAAU,CAAC;IACvD;IACA,MAAMI,MAAM,GAAG,IAAI,CAACF,SAAS,CAACG,SAAS,CAAC,IAAI,CAAC;IAC7C;IACA,IAAI,CAACC,QAAQ,GAAG,IAAIhB,KAAK,CAACiB,cAAc,EAAE,CAACC,aAAa,CAACJ,MAAM,CAAC;;IAGhE;IACA,MAAMK,UAAU,GAAG,IAAIC,YAAY,CAACN,MAAM,CAACO,MAAM,CAAC;IAClD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,UAAU,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC1CH,UAAU,CAACG,CAAC,CAAC,GAAGA,CAAC;IACnB;IACA;IACA,IAAI,CAACN,QAAQ,CAACO,YAAY,CAAC,OAAO,EAAE,IAAIvB,KAAK,CAACwB,eAAe,CAACL,UAAU,EAAE,CAAC,CAAC,CAAC;;IAE7E;IACA,IAAI,CAACM,cAAc,GAAG,IAAIzB,KAAK,CAAC0B,cAAc,CAAC;MAC7CC,QAAQ,EAAE;QACRC,KAAK,EAAE;UACLC,KAAK,EAAE;QACT,CAAC;QACDC,MAAM,EAAE;UACND,KAAK,EAAE,IAAI7B,KAAK,CAAC+B,KAAK,CAACtB,KAAK;QAC9B,CAAC;QACDuB,OAAO,EAAE;UACPH,KAAK,EAAEf,MAAM,CAACO;QAChB;MACF,CAAC;MACDY,YAAY,EAAEhC,MAAM;MACpBiC,cAAc,EAAEhC,QAAQ;MACxBiC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,KAAK;MACjBC,QAAQ,EAAErC,KAAK,CAACsC;IAClB,CAAC,CAAC;IAEF,IAAI,CAACC,IAAI,GAAG,IAAIvC,KAAK,CAACwC,MAAM,CAAC,IAAI,CAACxB,QAAQ,EAAE,IAAI,CAACS,cAAc,CAAC;IAEhEtB,IAAI,CAACsC,EAAE,CAAC,IAAI,CAAChB,cAAc,CAACE,QAAQ,CAACC,KAAK,EAAE;MAC1CC,KAAK,EAAE,IAAI;MACXa,QAAQ,EAAE,CAAC;MACXC,IAAI,EAAE,MAAM;MACZC,MAAM,EAAE,CAAC;IACX,CAAC,CAAC;EACJ;EACAC,QAAQ,GAAG;IACT,IAAI,CAACN,IAAI,CAACO,MAAM,EAAE;IAClB,IAAI,CAACP,IAAI,CAACQ,gBAAgB,EAAE;IAC5B,IAAI,CAACR,IAAI,CAACS,QAAQ,CAACC,OAAO,EAAE;IAC5B,IAAI,CAACV,IAAI,CAACvB,QAAQ,CAACiC,OAAO,EAAE;EAC9B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}