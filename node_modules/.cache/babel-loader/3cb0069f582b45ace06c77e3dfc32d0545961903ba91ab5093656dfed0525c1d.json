{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three';\nimport scene from '@/threeModal/scene';\nimport gsap from 'gsap';\n// import modityCityMaterial from '../modity/modityCityMaterial'\n// import FlyLine from './flyLine'\n// import FlyLineShader from './flyLineShader'\n// import CreateMeshLine from './createMeshLine'\n// import LineWall from './lineWall'\n// import LineRader from './lineRader'\n// import Alarm from './alarm'\nexport default class CreateCity {\n  constructor() {\n    let daoLoader = new DRACOLoader();\n    let loader = new GLTFLoader();\n    daoLoader.setDecoderPath('/glb/');\n    daoLoader.setDecoderConfig({\n      type: 'js'\n    });\n    daoLoader.preload();\n    loader.setDRACOLoader(daoLoader);\n    // 加载城市模型\n    loader.load('/glb/garden.glb', gltf => {\n      gltf.scene.traverse(item => {\n        console.log(item);\n        if (item.name === 'car') {\n          this.car = item;\n        }\n        // 根据点创建曲线\n\n        if (item.name === 'NURBS_曲线002') {\n          const points = [];\n          // console.log(item.geometry);\n          console.log(item.geometry.attributes.position);\n          for (let i = item.geometry.attributes.position.count - 1; i > 0; i--) {\n            points.push(new THREE.Vector3(item.geometry.attributes.position.getX(i), item.geometry.attributes.position.getY(i), item.geometry.attributes.position.getZ(i)));\n          }\n          console.log(points);\n          this.curve = new THREE.CatmullRomCurve3(points);\n          // console.log(this.curve);\n          this.curveProgress = 0;\n          gsap.to(this, {\n            curveProgress: 0.999,\n            duration: 10,\n            repeat: -1,\n            onUpdate: () => {\n              const point = this.curve.getPoint(this.curveProgress);\n              this.car.position.set(point.x, this.car.position.y, this.car.position.z);\n              if (this.curveProgress + 0.001 < 1) {\n                const point = this.curve.getPoint(this.curveProgress + 0.001);\n                this.car.lookAt(point);\n              }\n              // console.log(this.car.position)\n            }\n          });\n        }\n      });\n\n      scene.add(gltf.scene);\n    });\n\n    // 添加飞线\n    // const flyLine = new FlyLine()\n    // scene.add(flyLine.mesh)\n\n    // const flyLineShader = new FlyLineShader()\n    // scene.add(flyLineShader.mesh)\n\n    // // 添加光墙\n    // const lineWall = new LineWall()\n    // scene.add(lineWall.mesh)\n\n    // // 添加雷达\n    // const lineRader = new LineRader()\n    // scene.add(lineRader.mesh)\n\n    // // 添加警告标识\n    // const alarm = new Alarm()\n    // scene.add(alarm.mesh)\n    // alarm.onClick(() => {\n    //   alert('警告')\n    // })\n  }\n}","map":{"version":3,"names":["DRACOLoader","GLTFLoader","THREE","scene","gsap","CreateCity","constructor","daoLoader","loader","setDecoderPath","setDecoderConfig","type","preload","setDRACOLoader","load","gltf","traverse","item","console","log","name","car","points","geometry","attributes","position","i","count","push","Vector3","getX","getY","getZ","curve","CatmullRomCurve3","curveProgress","to","duration","repeat","onUpdate","point","getPoint","set","x","y","z","lookAt","add"],"sources":["D:/vscodeDemo/threeDemo/threejs_park/src/threeModal/mesh/createCity.js"],"sourcesContent":["import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\r\nimport * as THREE from 'three'\r\nimport scene from '@/threeModal/scene'\r\nimport gsap from 'gsap'\r\n// import modityCityMaterial from '../modity/modityCityMaterial'\r\n// import FlyLine from './flyLine'\r\n// import FlyLineShader from './flyLineShader'\r\n// import CreateMeshLine from './createMeshLine'\r\n// import LineWall from './lineWall'\r\n// import LineRader from './lineRader'\r\n// import Alarm from './alarm'\r\nexport default class CreateCity {\r\n  constructor () {\r\n    let daoLoader = new DRACOLoader()\r\n    let loader = new GLTFLoader()\r\n    daoLoader.setDecoderPath('/glb/')\r\n    daoLoader.setDecoderConfig({ type: 'js' })\r\n    daoLoader.preload()\r\n    loader.setDRACOLoader(daoLoader)\r\n    // 加载城市模型\r\n    loader.load('/glb/garden.glb', gltf => {\r\n      gltf.scene.traverse(item => {\r\n        console.log(item)\r\n        if (item.name === 'car') {\r\n          this.car = item\r\n        }\r\n        // 根据点创建曲线\r\n\r\n        if (item.name === 'NURBS_曲线002') {\r\n          const points = []\r\n          // console.log(item.geometry);\r\n          console.log(item.geometry.attributes.position)\r\n          for (\r\n            let i = item.geometry.attributes.position.count - 1;\r\n            i > 0;\r\n            i--\r\n          ) {\r\n            points.push(\r\n              new THREE.Vector3(\r\n                item.geometry.attributes.position.getX(i),\r\n                item.geometry.attributes.position.getY(i),\r\n                item.geometry.attributes.position.getZ(i)\r\n              )\r\n            )\r\n          }\r\n          console.log(points)\r\n          this.curve = new THREE.CatmullRomCurve3(points)\r\n          // console.log(this.curve);\r\n          this.curveProgress = 0\r\n          gsap.to(this, {\r\n            curveProgress: 0.999,\r\n            duration: 10,\r\n            repeat: -1,\r\n            onUpdate: () => {\r\n              const point = this.curve.getPoint(this.curveProgress)\r\n              this.car.position.set(point.x, this.car.position.y, this.car.position.z)\r\n              if (this.curveProgress + 0.001 < 1) {\r\n                const point = this.curve.getPoint(this.curveProgress + 0.001)\r\n                this.car.lookAt(point)\r\n              }\r\n              // console.log(this.car.position)\r\n            }\r\n          })\r\n        }\r\n      })\r\n      scene.add(gltf.scene)\r\n    })\r\n\r\n    // 添加飞线\r\n    // const flyLine = new FlyLine()\r\n    // scene.add(flyLine.mesh)\r\n\r\n    // const flyLineShader = new FlyLineShader()\r\n    // scene.add(flyLineShader.mesh)\r\n\r\n    // // 添加光墙\r\n    // const lineWall = new LineWall()\r\n    // scene.add(lineWall.mesh)\r\n\r\n    // // 添加雷达\r\n    // const lineRader = new LineRader()\r\n    // scene.add(lineRader.mesh)\r\n\r\n    // // 添加警告标识\r\n    // const alarm = new Alarm()\r\n    // scene.add(alarm.mesh)\r\n    // alarm.onClick(() => {\r\n    //   alert('警告')\r\n    // })\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}