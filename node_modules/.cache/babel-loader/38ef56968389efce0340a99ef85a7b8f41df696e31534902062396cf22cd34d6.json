{"ast":null,"code":"import * as THREE from 'three';\n// 城市模型材质修改\nexport default function modityCityMaterial(city) {\n  // 修改城市模型着色器\n  city.material.onBeforeCompile = shader => {\n    // 城市混合颜色效果\n    addGradColor(city, shader);\n  };\n}\n// 1.城市混合颜色效果\nfunction addGradColor(city, shader) {\n  // 先计算\n  city.geometry.computeBoundingBox();\n  // 解构得到外边界矩形\n  let {\n    max,\n    min\n  } = city.geometry.boundingBox;\n  // 最高点减去最低点得到高度差\n  let uHeight = max.y - min.y;\n  // 最高点的颜色\n  shader.uniforms.uTopColor = {\n    value: new THREE.Color('#6699cc')\n  };\n\n  // 高度差\n  shader.uniforms.uHeight = {\n    value: uHeight\n  };\n  shader.vertexShader = shader.vertexShader.replace('#include <common>',\n  // 将顶点着色器的顶点传到片元着色器上\n  // 这里定义一个属性，片元着色器才能获取\n  `#include <common>\n      varying vec3 vPosition; \n    `);\n  shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>',\n  // 将顶点着色器的顶点传到片元着色器上\n  // 将顶点着色器的position传到common定义的varying vposition，这样在片元着色器能获取到顶点着色器的position\n  `#include <begin_vertex>\n      vPosition = position;\n      `);\n  shader.fragmentShader = shader.fragmentShader.replace('#include <common>',\n  // 将材质传入的变量定义，将顶点传入的数据定义\n  `#include <common>\n        uniform vec3 uTopColor;\n        uniform float uHeight;\n        varying vec3 vPosition;\n        `);\n  shader.fragmentShader = shader.fragmentShader.replace('#include <dithering_fragment>',\n  // 定义一个将要混合成的颜色变量，将片元着色器的颜色传入\n  `#include <dithering_fragment>\n        vec4 distGradColor = gl_FragColor;\n        // 设置混合百分比 uHeight 的差可能为负，所以永远为正 -84 + 84 必须等于 0 到 160   即 负除正等于 负乘正\n        float gradMix = (vPosition.y + uHeight / 2.0) / uHeight; // 从0到高度  即从0到100%\n        // 计算混合颜色\n        vec3 gradMixColor = mix(distGradColor.xyz, uTopColor, gradMix);\n        gl_FragColor = vec4(gradMixColor, 1);\n        `);\n}","map":{"version":3,"names":["THREE","modityCityMaterial","city","material","onBeforeCompile","shader","addGradColor","geometry","computeBoundingBox","max","min","boundingBox","uHeight","y","uniforms","uTopColor","value","Color","vertexShader","replace","fragmentShader"],"sources":["D:/vscodeDemo/threeDemo/threejs_smartcity/src/threeModal/modity/modityCityMaterial.js"],"sourcesContent":["import * as THREE from 'three'\r\n// 城市模型材质修改\r\nexport default function modityCityMaterial (city) {\r\n  \r\n  // 修改城市模型着色器\r\n  city.material.onBeforeCompile = shader => {\r\n    // 城市混合颜色效果\r\n    addGradColor(city, shader)\r\n    \r\n  }\r\n}\r\n// 1.城市混合颜色效果\r\nfunction addGradColor(city, shader) {\r\n  // 先计算\r\n  city.geometry.computeBoundingBox()\r\n  // 解构得到外边界矩形\r\n  let { max, min } = city.geometry.boundingBox\r\n  // 最高点减去最低点得到高度差\r\n  let uHeight = max.y - min.y\r\n  // 最高点的颜色\r\n  shader.uniforms.uTopColor = {\r\n    value: new THREE.Color('#6699cc')\r\n  }\r\n\r\n  // 高度差\r\n  shader.uniforms.uHeight = {\r\n    value: uHeight\r\n  }\r\n  shader.vertexShader = shader.vertexShader.replace(\r\n    '#include <common>', // 将顶点着色器的顶点传到片元着色器上\r\n    // 这里定义一个属性，片元着色器才能获取\r\n    `#include <common>\r\n      varying vec3 vPosition; \r\n    `\r\n  )\r\n  shader.vertexShader = shader.vertexShader.replace(\r\n    '#include <begin_vertex>', // 将顶点着色器的顶点传到片元着色器上\r\n    // 将顶点着色器的position传到common定义的varying vposition，这样在片元着色器能获取到顶点着色器的position\r\n    `#include <begin_vertex>\r\n      vPosition = position;\r\n      `\r\n  )\r\n  shader.fragmentShader = shader.fragmentShader.replace(\r\n    '#include <common>',\r\n    // 将材质传入的变量定义，将顶点传入的数据定义\r\n    `#include <common>\r\n        uniform vec3 uTopColor;\r\n        uniform float uHeight;\r\n        varying vec3 vPosition;\r\n        `\r\n  )\r\n  shader.fragmentShader = shader.fragmentShader.replace(\r\n    '#include <dithering_fragment>',\r\n    // 定义一个将要混合成的颜色变量，将片元着色器的颜色传入\r\n    `#include <dithering_fragment>\r\n        vec4 distGradColor = gl_FragColor;\r\n        // 设置混合百分比 uHeight 的差可能为负，所以永远为正 -84 + 84 必须等于 0 到 160   即 负除正等于 负乘正\r\n        float gradMix = (vPosition.y + uHeight / 2.0) / uHeight; // 从0到高度  即从0到100%\r\n        // 计算混合颜色\r\n        vec3 gradMixColor = mix(distGradColor.xyz, uTopColor, gradMix);\r\n        gl_FragColor = vec4(gradMixColor, 1);\r\n        `\r\n  )\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B;AACA,eAAe,SAASC,kBAAkB,CAAEC,IAAI,EAAE;EAEhD;EACAA,IAAI,CAACC,QAAQ,CAACC,eAAe,GAAGC,MAAM,IAAI;IACxC;IACAC,YAAY,CAACJ,IAAI,EAAEG,MAAM,CAAC;EAE5B,CAAC;AACH;AACA;AACA,SAASC,YAAY,CAACJ,IAAI,EAAEG,MAAM,EAAE;EAClC;EACAH,IAAI,CAACK,QAAQ,CAACC,kBAAkB,EAAE;EAClC;EACA,IAAI;IAAEC,GAAG;IAAEC;EAAI,CAAC,GAAGR,IAAI,CAACK,QAAQ,CAACI,WAAW;EAC5C;EACA,IAAIC,OAAO,GAAGH,GAAG,CAACI,CAAC,GAAGH,GAAG,CAACG,CAAC;EAC3B;EACAR,MAAM,CAACS,QAAQ,CAACC,SAAS,GAAG;IAC1BC,KAAK,EAAE,IAAIhB,KAAK,CAACiB,KAAK,CAAC,SAAS;EAClC,CAAC;;EAED;EACAZ,MAAM,CAACS,QAAQ,CAACF,OAAO,GAAG;IACxBI,KAAK,EAAEJ;EACT,CAAC;EACDP,MAAM,CAACa,YAAY,GAAGb,MAAM,CAACa,YAAY,CAACC,OAAO,CAC/C,mBAAmB;EAAE;EACrB;EACC;AACL;AACA,KAAK,CACF;EACDd,MAAM,CAACa,YAAY,GAAGb,MAAM,CAACa,YAAY,CAACC,OAAO,CAC/C,yBAAyB;EAAE;EAC3B;EACC;AACL;AACA,OAAO,CACJ;EACDd,MAAM,CAACe,cAAc,GAAGf,MAAM,CAACe,cAAc,CAACD,OAAO,CACnD,mBAAmB;EACnB;EACC;AACL;AACA;AACA;AACA,SAAS,CACN;EACDd,MAAM,CAACe,cAAc,GAAGf,MAAM,CAACe,cAAc,CAACD,OAAO,CACnD,+BAA+B;EAC/B;EACC;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,CACN;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}