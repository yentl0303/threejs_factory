{"ast":null,"code":"import * as THREE from 'three';\n// 城市模型材质修改\nexport default function modityCityMaterial(city) {\n  // 先计算\n  city.geometry.computeBoundingBox();\n  // 解构得到外边界矩形\n  let {\n    max,\n    min\n  } = city.geometry.boundingBox;\n  // 最高点减去最低点得到高度差\n  let uHeight = max.y - min.y;\n  // console.log(uHeight)\n  // 修改城市模型着色器\n  city.material.onBeforeCompile = shader => {\n    console.log(111111);\n    // 设置着色器\n    console.log(shader.vertexShader);\n    console.log(shader.fragmentShader);\n    // 最高点的颜色\n    shader.uniforms.uTopColor = {\n      value: new THREE.Color('#ffffff')\n    };\n\n    // 高度差\n    shader.uniforms.uHeight = {\n      value: uHeight\n    };\n    shader.vertexShader = shader.vertexShader.replace('#include <common>',\n    // 将顶点着色器的顶点传到片元着色器上\n    // 这里定义一个属性，片元着色器才能获取\n    `#include <common>\n        varying vec3 vPosition; \n      `);\n    shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>',\n    // 将顶点着色器的顶点传到片元着色器上\n    // 将顶点着色器的position传到common定义的varying vposition，这样在片元着色器能获取到顶点着色器的position\n    `#include <begin_vertex>\n        vPosition = position;\n        `);\n    shader.fragmentShader = shader.fragmentShader.replace('#include <common>',\n    // 将材质传入的变量定义，将顶点传入的数据定义\n    `#include <common>\n          uniform vec3 uTopColor;\n          uniform float uHeight;\n          varying vec3 vPosition;\n          `);\n    shader.fragmentShader = shader.fragmentShader.replace('#include <dithering_fragment>',\n    // 定义一个将要混合成的颜色变量，将片元着色器的颜色传入\n    `#include <dithering_fragment>\n          vec4 distGradColor = gl_FargColor;\n          // 设置混合百分比 uHeight 的差可能为负，所以永远为正 -84 + 84 必须等于 0 到 160   即 负除正等于 负乘正\n          float gradMix = (vPostion.y + uHeight / 2.0) / uHeight; // 从0到高度  即从0到100%\n          // 计算混合颜色\n          vec3 gradMixColor = mix(distGradColor.xyz, uTopColor, gradMix);\n          gl_Fragment = vec4(gradMixColor, 1)\n          `);\n  };\n}","map":{"version":3,"names":["THREE","modityCityMaterial","city","geometry","computeBoundingBox","max","min","boundingBox","uHeight","y","material","onBeforeCompile","shader","console","log","vertexShader","fragmentShader","uniforms","uTopColor","value","Color","replace"],"sources":["D:/vscodeDemo/threeDemo/threejs_smartcity/src/threeModal/modity/modityCityMaterial.js"],"sourcesContent":["import * as THREE from 'three'\r\n// 城市模型材质修改\r\nexport default function modityCityMaterial (city) {\r\n  // 先计算\r\n  city.geometry.computeBoundingBox()\r\n  // 解构得到外边界矩形\r\n  let { max, min } = city.geometry.boundingBox\r\n  // 最高点减去最低点得到高度差\r\n  let uHeight = max.y - min.y\r\n  // console.log(uHeight)\r\n  // 修改城市模型着色器\r\n  city.material.onBeforeCompile = shader => {\r\n    console.log(111111)\r\n    // 设置着色器\r\n    console.log(shader.vertexShader)\r\n    console.log(shader.fragmentShader)\r\n    // 最高点的颜色\r\n    shader.uniforms.uTopColor = {\r\n      value: new THREE.Color('#ffffff')\r\n    }\r\n\r\n    // 高度差\r\n    shader.uniforms.uHeight = {\r\n      value: uHeight\r\n    }\r\n    shader.vertexShader = shader.vertexShader.replace(\r\n      '#include <common>', // 将顶点着色器的顶点传到片元着色器上\r\n      // 这里定义一个属性，片元着色器才能获取\r\n      `#include <common>\r\n        varying vec3 vPosition; \r\n      `\r\n    )\r\n    shader.vertexShader = shader.vertexShader.replace(\r\n      '#include <begin_vertex>', // 将顶点着色器的顶点传到片元着色器上\r\n      // 将顶点着色器的position传到common定义的varying vposition，这样在片元着色器能获取到顶点着色器的position\r\n      `#include <begin_vertex>\r\n        vPosition = position;\r\n        `\r\n    )\r\n    shader.fragmentShader = shader.fragmentShader.replace(\r\n      '#include <common>',\r\n      // 将材质传入的变量定义，将顶点传入的数据定义\r\n      `#include <common>\r\n          uniform vec3 uTopColor;\r\n          uniform float uHeight;\r\n          varying vec3 vPosition;\r\n          `\r\n    )\r\n    shader.fragmentShader = shader.fragmentShader.replace(\r\n      '#include <dithering_fragment>',\r\n      // 定义一个将要混合成的颜色变量，将片元着色器的颜色传入\r\n      `#include <dithering_fragment>\r\n          vec4 distGradColor = gl_FargColor;\r\n          // 设置混合百分比 uHeight 的差可能为负，所以永远为正 -84 + 84 必须等于 0 到 160   即 负除正等于 负乘正\r\n          float gradMix = (vPostion.y + uHeight / 2.0) / uHeight; // 从0到高度  即从0到100%\r\n          // 计算混合颜色\r\n          vec3 gradMixColor = mix(distGradColor.xyz, uTopColor, gradMix);\r\n          gl_Fragment = vec4(gradMixColor, 1)\r\n          `\r\n    )\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B;AACA,eAAe,SAASC,kBAAkB,CAAEC,IAAI,EAAE;EAChD;EACAA,IAAI,CAACC,QAAQ,CAACC,kBAAkB,EAAE;EAClC;EACA,IAAI;IAAEC,GAAG;IAAEC;EAAI,CAAC,GAAGJ,IAAI,CAACC,QAAQ,CAACI,WAAW;EAC5C;EACA,IAAIC,OAAO,GAAGH,GAAG,CAACI,CAAC,GAAGH,GAAG,CAACG,CAAC;EAC3B;EACA;EACAP,IAAI,CAACQ,QAAQ,CAACC,eAAe,GAAGC,MAAM,IAAI;IACxCC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB;IACAD,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,YAAY,CAAC;IAChCF,OAAO,CAACC,GAAG,CAACF,MAAM,CAACI,cAAc,CAAC;IAClC;IACAJ,MAAM,CAACK,QAAQ,CAACC,SAAS,GAAG;MAC1BC,KAAK,EAAE,IAAInB,KAAK,CAACoB,KAAK,CAAC,SAAS;IAClC,CAAC;;IAED;IACAR,MAAM,CAACK,QAAQ,CAACT,OAAO,GAAG;MACxBW,KAAK,EAAEX;IACT,CAAC;IACDI,MAAM,CAACG,YAAY,GAAGH,MAAM,CAACG,YAAY,CAACM,OAAO,CAC/C,mBAAmB;IAAE;IACrB;IACC;AACP;AACA,OAAO,CACF;IACDT,MAAM,CAACG,YAAY,GAAGH,MAAM,CAACG,YAAY,CAACM,OAAO,CAC/C,yBAAyB;IAAE;IAC3B;IACC;AACP;AACA,SAAS,CACJ;IACDT,MAAM,CAACI,cAAc,GAAGJ,MAAM,CAACI,cAAc,CAACK,OAAO,CACnD,mBAAmB;IACnB;IACC;AACP;AACA;AACA;AACA,WAAW,CACN;IACDT,MAAM,CAACI,cAAc,GAAGJ,MAAM,CAACI,cAAc,CAACK,OAAO,CACnD,+BAA+B;IAC/B;IACC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,CACN;EACH,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}