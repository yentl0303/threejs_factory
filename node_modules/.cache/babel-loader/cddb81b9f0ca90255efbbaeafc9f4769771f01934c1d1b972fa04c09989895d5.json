{"ast":null,"code":"import { onMounted, reactive, ref } from 'vue';\nimport SceneCanvas from '@/components/SceneCanvas.vue';\nimport BigScreen from '@/components/bigScreen.vue';\nimport { getCityInformation, getCityList } from '@/api/cityAPI';\nimport gsap from 'gsap';\nexport default {\n  __name: 'HomeView',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const resInformation = reactive({\n      iot: {\n        number: 0\n      },\n      event: {\n        number: 0\n      },\n      power: {\n        number: 0\n      },\n      test: {\n        number: 0\n      }\n    });\n    const resCityList = ref([]);\n    onMounted(() => {\n      getInformationData();\n      getCityListData();\n      setInterval(() => {\n        getInformationData();\n        getCityListData();\n      }, 30000);\n    });\n    // 获取城市信息\n    const getInformationData = async () => {\n      const res = await getCityInformation();\n      const data = res.data.data;\n      for (const key in data) {\n        resInformation[key].name = data[key].name;\n        resInformation[key].unit = data[key].unit;\n        gsap.to(resInformation[key], {\n          number: data[key].number,\n          duration: 1\n        });\n      }\n    };\n    // 获取城市管理列表\n    const getCityListData = async () => {\n      const res = await getCityList();\n      resCityList.value = res.data.list;\n    };\n    const __returned__ = {\n      resInformation,\n      resCityList,\n      getInformationData,\n      getCityListData,\n      onMounted,\n      reactive,\n      ref,\n      SceneCanvas,\n      BigScreen,\n      get getCityInformation() {\n        return getCityInformation;\n      },\n      get getCityList() {\n        return getCityList;\n      },\n      get gsap() {\n        return gsap;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"AAOA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,GAAG,QAAQ,KAAK;AAC9C,OAAOC,WAAW,MAAM,8BAA8B;AACtD,OAAOC,SAAS,MAAM,4BAA4B;AAClD,SAASC,kBAAkB,EAAEC,WAAW,QAAQ,eAAe;AAC/D,OAAOC,IAAI,MAAM,MAAM;;;;;;;IACvB,MAAMC,cAAc,GAAGP,QAAQ,CAAC;MAC9BQ,GAAG,EAAE;QAAEC,MAAM,EAAE;MAAE,CAAC;MAClBC,KAAK,EAAE;QAAED,MAAM,EAAE;MAAE,CAAC;MACpBE,KAAK,EAAE;QAAEF,MAAM,EAAE;MAAE,CAAC;MACpBG,IAAI,EAAE;QAAEH,MAAM,EAAE;MAAE;IACpB,CAAC,CAAC;IACF,MAAMI,WAAW,GAAGZ,GAAG,CAAC,EAAE,CAAC;IAC3BF,SAAS,CAAC,MAAM;MACde,kBAAkB,EAAE;MACpBC,eAAe,EAAE;MACjBC,WAAW,CAAC,MAAM;QAChBF,kBAAkB,EAAE;QACpBC,eAAe,EAAE;MACnB,CAAC,EAAE,KAAK,CAAC;IACX,CAAC,CAAC;IACF;IACA,MAAMD,kBAAkB,GAAG,YAAY;MACrC,MAAMG,GAAG,GAAG,MAAMb,kBAAkB,EAAE;MACtC,MAAMc,IAAI,GAAGD,GAAG,CAACC,IAAI,CAACA,IAAI;MAC1B,KAAK,MAAMC,GAAG,IAAID,IAAI,EAAE;QACtBX,cAAc,CAACY,GAAG,CAAC,CAACC,IAAI,GAAGF,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI;QACzCb,cAAc,CAACY,GAAG,CAAC,CAACE,IAAI,GAAGH,IAAI,CAACC,GAAG,CAAC,CAACE,IAAI;QACzCf,IAAI,CAACgB,EAAE,CAACf,cAAc,CAACY,GAAG,CAAC,EAAE;UAC3BV,MAAM,EAAES,IAAI,CAACC,GAAG,CAAC,CAACV,MAAM;UACxBc,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ;IACF,CAAC;IACD;IACA,MAAMR,eAAe,GAAI,YAAY;MACnC,MAAME,GAAG,GAAG,MAAOZ,WAAW,EAAE;MAChCQ,WAAW,CAACW,KAAK,GAAGP,GAAG,CAACC,IAAI,CAACO,IAAI;IACnC,CAAC","names":["onMounted","reactive","ref","SceneCanvas","BigScreen","getCityInformation","getCityList","gsap","resInformation","iot","number","event","power","test","resCityList","getInformationData","getCityListData","setInterval","res","data","key","name","unit","to","duration","value","list"],"sources":["D:/vscodeDemo/threeDemo/threejs_park/src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div>\n    <SceneCanvas :resCityList=\"resCityList\"></SceneCanvas>\n    <BigScreen :resInformation=\"resInformation\" :resCityList=\"resCityList\"></BigScreen>\n  </div>\n</template>\n<script setup>\nimport { onMounted, reactive, ref } from 'vue'\nimport SceneCanvas from '@/components/SceneCanvas.vue'\nimport BigScreen from '@/components/bigScreen.vue'\nimport { getCityInformation, getCityList } from '@/api/cityAPI'\nimport gsap from 'gsap'\nconst resInformation = reactive({\n  iot: { number: 0 },\n  event: { number: 0 },\n  power: { number: 0 },\n  test: { number: 0 },\n})\nconst resCityList = ref([])\nonMounted(() => {\n  getInformationData()\n  getCityListData()\n  setInterval(() => {\n    getInformationData()\n    getCityListData()\n  }, 30000)\n})\n// 获取城市信息\nconst getInformationData = async () => {\n  const res = await getCityInformation()\n  const data = res.data.data\n  for (const key in data) {\n    resInformation[key].name = data[key].name\n    resInformation[key].unit = data[key].unit\n    gsap.to(resInformation[key], {\n      number: data[key].number,\n      duration: 1\n    })\n  }\n}\n// 获取城市管理列表\nconst getCityListData =  async () => {\n  const res = await  getCityList()\n  resCityList.value = res.data.list\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}