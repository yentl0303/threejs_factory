{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-c64005f8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"sceneCanvas\",\n  ref: \"sceneDiv\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", null, null, -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 画布元素追加 \"), _hoisted_2], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;;EACOA,KAAK,EAAC,aAAa;EAACC,GAAG,EAAC;;gEAE3BC,oBAAW;;;uBAFbC,oBAGM,OAHNC,UAGM,GAFJC,+BAAe,EACfC,UAAW","names":["class","ref","_createElementVNode","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2"],"sourceRoot":"","sources":["D:\\vscodeDemo\\threeDemo\\threejs_smartcity\\src\\components\\SceneCanvas.vue"],"sourcesContent":["<template>\n  <div class=\"sceneCanvas\" ref=\"sceneDiv\">\n    <!-- 画布元素追加 -->\n    <div></div>\n  </div>\n</template>\n<!-- 场景 -->\n<script setup>\n// 1.导入threejs\nimport * as THREE from 'three'\nimport { ref, onMounted } from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\n// 2.初始化场景\nconst scene = new THREE.Scene()\n\n// 3.初始化透视相机\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  window.innerWidth / window.innerHeight,\n  0.1,\n  1000\n)\n// 4.设置相机位置\ncamera.aspect = window.innerWidth / window.innerHeight\ncamera.updateProjectionMatrix() // 更新投影矩阵\ncamera.position.set(0, 0, 25)\n// 5.将相机添加进场景\nscene.add(camera)\n\n//6.加入辅助坐标轴\nconst axse = new THREE.AxesHelper(10)\nscene.add(axse)\n\n//7.初始化渲染器\nconst renderer = new THREE.WebGL1Renderer({ alpha: true })\n// 允许在场景中使用阴影贴图\nrenderer.shadowMap.enabled = true\n// 设置画布大小\nrenderer.setSize(window.innerWidth, window.innerHeight)\n\n// 11.设置屏幕大小改变画布自适应\nwindow.addEventListener('resize', () => {\n  // 更新摄像头\n  camera.aspect = window.innerWidth / window.innerHeight\n  // 更新投影矩阵\n  camera.updateProjectionMatrix()\n  // 更新渲染器\n  renderer.setSize(window.innerWidth, window.innerHeight)\n  // 设置渲染器像素比例\n  renderer.setPixelRatio(window.devicePixelRatio)\n})\n\n// 8.将渲染器加入dom\n// document.body.appendChild(renderer.domElement)\n\n// const clock = new THREE.Clock()\n// 10.创建轨道控制器\nconst controls = new OrbitControls(camera, renderer.domElement)\n// 12.设置控制阻尼\ncontrols.enableDamping = true\n\n//9.渲染器渲染场景\n// function animate () {\n//   // const dateTime = clock.getDelta()\n//   // 控制器不起效果的原因是控制轨道每一帧都要更新\n//   controls.update()\n//   renderer.render(scene, camera)\n//   requestAnimationFrame(animate)\n// }\n// animate()\n\n// vue挂载成功之后再去获取dom\nonMounted(() => {\n  // 场景div\n  let sceneDiv = ref(undefined)\n  console.log(sceneDiv.value);\n})\n</script>\n\n<style scoped lang=\"scss\">\n// 画布全屏\n.scene {\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  left: 0;\n  top: 0;\n  z-index: 100;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}