{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-c64005f8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"sceneCanvas\",\n  ref: \"sceneDiv\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 画布元素追加 \")], 512 /* NEED_PATCH */);\n}","map":{"version":3,"mappings":";;;EACOA,KAAK,EAAC,aAAa;EAACC,GAAG,EAAC;;;uBAA7BC,oBAEM,OAFNC,UAEM,GADJC,+BAAe","names":["class","ref","_createElementBlock","_hoisted_1","_createCommentVNode"],"sourceRoot":"","sources":["D:\\vscodeDemo\\threeDemo\\threejs_smartcity\\src\\components\\SceneCanvas.vue"],"sourcesContent":["<template>\n  <div class=\"sceneCanvas\" ref=\"sceneDiv\">\n    <!-- 画布元素追加 -->\n  </div>\n</template>\n<!-- 场景 -->\n<script setup>\n// 1.导入threejs\n// import * as THREE from 'three'\n// 2.导入(初始化)场景\nimport scene from '@/threeModal/scene'\n// 3.1导入相机配置\nimport camera from '@/threeModal/camera'\n// 4.导入渲染器\nimport renderer from '@/threeModal/renderer'\n// // 导入控制器\n// import controls from '@/threeModal/controls'\n// 导入创建物体文件\nimport createMesh from '@/threeModal/createMesh'\n// 导入渲染更新\nimport animate from '@/threeModal/animate'\n// 导入初始化监听屏幕大小\nimport '@/threeModal/init'\n// 5.1导入坐标轴\nimport axse from '@/threeModal/axseHelp'\nimport { ref, onMounted, defineProps, watch } from 'vue'\n\nimport Alarm from '@/threeModal/mesh/alarm'\nimport LineWall from '@/threeModal/mesh/lineWall'\nimport FlyLineShader from '@/threeModal/mesh/flyLineShader'\nimport LineRader from '@/threeModal/mesh/lineRader'\n\nconst props = defineProps(['resCityList'])\n// 7.1获取场景div\nlet sceneDiv = ref(null)\n\n// 3.2.将相机添加进场景\nscene.add(camera)\n\n// 5.2 创建坐标轴\nscene.add(axse)\n\n// 6.创建物体\ncreateMesh()\n\n// vue挂载成功之后再去追加dom\nonMounted(() => {\n  // 7.2将渲染器加入dom\n  sceneDiv.value.appendChild(renderer.domElement)\n  // 8.2渲染执行\n  animate()\n})\nconst meshDestroy = []\nconst meshFn = {\n  火警: position => {\n    // 光墙\n    // 添加光墙\n    const lineWall = new LineWall(0.3, 2, position)\n    meshDestroy.push(lineWall)\n    scene.add(lineWall.mesh)\n  },\n  治安: position => {\n    // 光线\n    // 添加光线\n    const flyLineShader = new FlyLineShader(position)\n    scene.add(flyLineShader.mesh)\n    meshDestroy.push(flyLineShader)\n  },\n  电力: position => {\n    // 雷达\n    // 添加雷达\n  const lineRader = new LineRader()\n  scene.add(lineRader.mesh)\n    meshDestroy.push(flyLineShader)\n  }\n}\nwatch(\n  () => props.resCityList,\n  () => {\n    // 每次得到新的数据要销毁旧物体\n    meshDestroy.forEach(item => {\n      item.onRemove()\n    })\n    props.resCityList.forEach((item, i) => {\n      console.log(item, i)\n      //    返回的位置数据为0-100\n      const position = {\n        x: item.position.x / 15 - 3.5,\n        z: item.position.z / 15 - 3.5\n      }\n      // 生成精灵图\n      // 添加警告标识\n      const alarm = new Alarm(item.name, position)\n      console.log(position)\n      // 将生成的物体放到数组，以待每次新数据传入生成新物体时销毁旧物体\n      meshDestroy.push(alarm)\n      scene.add(alarm.mesh)\n      if (meshFn[item.name]) {\n        meshFn[item.name](position)\n      }\n    })\n  }\n)\n</script>\n\n<style scoped lang=\"scss\">\n// 画布全屏\n.scene {\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  left: 0;\n  top: 0;\n  z-index: 100;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}